""""Модуль подключений к базам данных."""
# ---------------------------------- Импорт стандартных библиотек Пайтона
# ---------------------------------- Импорт сторонних библиотек
from sqlalchemy import create_engine # Библиотека для создания подключений к БД
from sqlalchemy.engine.url import URL
from sqlalchemy.exc import OperationalError
# ---------------------------------- Импорт локальных модулей
# ----------------------------------------------------------------------------------------------------------------------

def get_connect(any_config:dict | URL | str):
    '''Функция создания подключения к базе данных. На вход принимает файл конфигурации'''
    # добавить позже описание переменных

    try:  # Блок исключений ошибок при осуществлении подключения:
        # any_config # 1.Проверка на отсутствие файла концигурации подкючения: если нет данных на вход: !!

        # Проверка типа входной конфигурации подключения:
        # # Если на вход url_string:
        # if isinstance(any_config, URL) == True:
        #     url_string = any_config

        # Если на вход конфигурация в словаре:
        if isinstance(any_config, dict) == True:
            url_string = URL.create(**any_config)  # 1. Формируем URL-строку соединения с БД.
            #  Эквивалент: url_string = (f'{drivername}://{username}:{password}@{host}:{port}/{database}')
        elif isinstance(any_config, str) == True:
            url_string = any_config
        else:
            url_string = None

        engine = create_engine(url_string)  # 2. Создаем переменную подключения к БД.
        #  pool_pre_ping=True - параметр проверяет соединения на жизнеспособность при каждом извлечении из пула
        # ,echo=True - выводит логирование всех действий.

        connection = engine.connect()

        return connection
    # except Exception:
    #     # 1. Значит выведет:
    #     print(f'No connection configuration database!\n(Отсутствует конфигурация подключения к базе данных!')
    except OperationalError as first_error:
        print(f'Вы превысили лимит одновременных подключений к серверу: {first_error}' # PostgreSQL
              f'Необходимо закрывать соединеия после вызова!')
    #     Эта ошибка является ошибкой DBAPI и возникает из драйвера базы данных (DBAPI)

    #  Если наступит ошибка в значениях:
    except (ValueError, TypeError):
        print(f'Ошибка подключения к базе данных! Проверьте входные данные {any_config} \n'
                     f'и зависимые переменные: формирование url_string: {url_string}, engine: {engine}')

    #  Другие любые ошибки (скорее всего будут относиться к синтаксису):
    except Exception as error:
        print(f'Ошибка синтаксиса: {type(error).__name__}, сообщение: {str(error)}!')
